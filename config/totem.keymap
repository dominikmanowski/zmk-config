//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"

/* source key position labels */
#include "zmk-helpers/key-labels/totem.h"

#define Base        0
#define Nav         1
#define Num         2
#define Sym         3
#define Fun         4


// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)


/*                   KEY POSITIONS
    ╭──────────────────────┬─────────────────────╮
    │  LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
 ╭──╯  LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 ╰───╮
 │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
 ╰──────────╮  LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
            ╰──────────────┴─────────────╯

*/

/* Home row mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                              // thumbs

ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(tdl, tap_dance,
    tapping-term-ms = <175>;
    bindings = <&kp LEFT>, <&kp LA(LEFT_ARROW)>;
)

ZMK_BEHAVIOR(tdr, tap_dance,
    tapping-term-ms = <175>;
    bindings = <&kp RIGHT>, <&kp LA(RIGHT)>;
)

ZMK_BEHAVIOR(brackets, tap_dance,
    tapping-term-ms = <175>;
    bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
)

ZMK_BEHAVIOR(braces, tap_dance,
    tapping-term-ms = <175>;
    bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
)

ZMK_BEHAVIOR(parenthesis, tap_dance,
    tapping-term-ms = <175>;
    bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
)

ZMK_BEHAVIOR(th, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
    hold-while-undecided
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qmark, SFT, &kp QMARK, &kp EXCL)

ZMK_COMBO(enter,     &th RS(RGUI) ENTER, RM1 RM2, Base)
ZMK_COMBO(tab,       &th LS(LGUI) TAB,   LB2 LB1, Base)
ZMK_COMBO(copy,      &kp LG(C),          LB2 LB1, Base)
ZMK_COMBO(cut,       &kp LG(X),          LB3 LB2, Base)
ZMK_COMBO(paste,     &kp LG(V),          LB3 LB1, Base)
ZMK_COMBO(undo,      &kp LG(Z),          LB4 LB3, Base)
ZMK_COMBO(caps-word, &caps_word,         LB4 LB3, Base)

// / {
    // behaviors {
        // tdl: tdl {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "Tap Dance Left";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <175>;
        //     bindings = <&kp LEFT>, <&kp LA(LEFT_ARROW)>;
        // };

        // tdr: tdr {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "Tap Dance Right";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <175>;
        //     bindings = <&kp RIGHT>, <&kp LA(RIGHT)>;
        // };

        // brackets: brackets {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "Brackets";
        //     #binding-cells = <0>;
        //     bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

        //     tapping-term-ms = <175>;
        // };

        // braces: braces {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "Braces";
        //     #binding-cells = <0>;
        //     bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

        //     tapping-term-ms = <175>;
        // };

        // parenthesis: parenthesis {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "Parenthesis";
        //     #binding-cells = <0>;
        //     bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

        //     tapping-term-ms = <175>;
        // };

        // thans: thans {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "Thans";
        //     #binding-cells = <0>;
        //     bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

        //     tapping-term-ms = <175>;
        // };

        // backspace: backspace {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "Backspace";
        //     #binding-cells = <0>;
        //     bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

        //     tapping-term-ms = <250>;
        // };

        // lbspc: lbspc {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "Layer_backspace";
        //     bindings = <&mo>, <&backspace>;

        //     #binding-cells = <2>;
        //     tapping-term-ms = <250>;
        //     flavor = "tap-preferred";
        //     quick-tap-ms = <225>;
        // };

        // th: th {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "tap_hold";
        //     bindings = <&kp>, <&kp>;

        //     #binding-cells = <2>;
        //     tapping-term-ms = <175>;
        //     hold-while-undecided;
        // };

        // comma_inner_morph: comma_inner_morph {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "COMMA_INNER_MORPH";
        //     bindings = <&kp COMMA>, <&kp LT>;

        //     #binding-cells = <0>;
        //     mods = <(MOD_LCTL)>;
        // };

        // comma_morph: comma_morph {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "COMMA_MORPH";
        //     bindings = <&kp COMMA>, <&comma_inner_morph>;

        //     #binding-cells = <0>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_inner_morph: dot_inner_morph {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "DOT_INNER_MORPH";
        //     bindings = <&kp COMMA>, <&kp GT>;

        //     #binding-cells = <0>;
        //     mods = <(MOD_LCTL)>;
        // };

        // dot_morph: dot_morph {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "DOT_MORPH";
        //     bindings = <&kp COMMA>, <&dot_inner_morph>;

        //     #binding-cells = <0>;
        //     mods = <(MOD_LSFT)>;
        // };

        // qmark: qmark {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "QMARK";
        //     bindings = <&kp QMARK>, <&kp EXCL>;

        //     #binding-cells = <0>;
        //     mods = <(MOD_LSFT)>;
        // };
    // };


    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
           &kp Q         &kp W            &kp E        &kp R          &kp T                      &kp Y                    &kp U          &kp I         &kp O        &kp P
           &hml LCTRL A  &hml LEFT_ALT S  &hml LGUI D  &hml LSHIFT F  &hml LS(LA(LC(LGUI))) G    &hmr RS(RA(RC(RGUI))) H  &hmr RSHIFT J  &hmr RGUI K   &hml RALT L  &hmr RCTRL SEMI
&kp GRAVE  &kp Z         &kp X            &kp C        &kp V          &kp B                      &kp N                    &kp M          &comma_morph  &dot_morph   &qmark           &kp SQT
                                          &kp ESC      &lt 1 SPACE    &lt 3 TAB                  &lt 2 BACKSPACE          &lt 4 SPACE    &kp RALT
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
       &none      &none     &none     &none       &none                       &none  &none     &none          &none        &none
       &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHIFT  &kp LS(LA(LC(LEFT_GUI)))    &none  &tdl      &kp DOWN       &kp UP       &tdr
&none  &none      &none     &none     &none       &none                       &none  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END  &none
                            &none     &none       &none                       &none  &none     &none
            >;
        };

        Num {
            label = "Num";
            bindings = <
       &none  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &none    &none  &none       &none     &none          &none
       &none  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none    &none  &kp RSHIFT  &kp RGUI  &kp RIGHT_ALT  &kp RIGHT_CONTROL
&none  &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none    &none  &none       &none     &none          &none              &none
                            &kp NUMBER_0  &none         &none    &none  &none       &none
            >;
        };

        Sym {
            label = "Sym";
            bindings = <
       &none         &none         &none     &none       &none                   &kp BACKSLASH  &kp AMPERSAND    &kp ASTERISK  &parenthesis  &kp MINUS
       &kp LEFT_ALT  &kp LEFT_ALT  &kp LGUI  &kp LSHIFT  &kp LS(LA(LC(LGUI)))    &braces        &kp DOLLAR       &kp PERCENT   &kp CARET     &kp PLUS
&none  &none         &none         &none     &none       &none                   &brackets      &kp EXCLAMATION  &kp AT_SIGN   &kp POUND     &thans     &kp EQUAL
                                   &none     &none       &none                   &none          &none            &none
            >;
        };

        Fun {
            label = "Fun";
            bindings = <
       &kp F12  &kp F7  &kp F8  &kp F9  &none    &none                 &none       &none     &none          &none
       &kp F11  &kp F4  &kp F5  &kp F6  &none    &kp RS(RA(RC(RGUI)))  &kp RSHIFT  &kp RGUI  &kp RIGHT_ALT  &kp RIGHT_CONTROL
&none  &kp F10  &kp F1  &kp F2  &kp F3  &none    &none                 &none       &none     &none          &none              &none
                        &none   &none   &none    &none                 &none       &none
            >;
        };
    };
};
