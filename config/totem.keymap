//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Nav         1
#define Num         2
#define Sym         3
#define Fun         4

/ {
    behaviors {
        tdl: tdl {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap Dance Left";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp LEFT>, <&kp LA(LEFT_ARROW)>;
        };

        tdr: tdr {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap Dance Right";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp RIGHT>, <&kp LA(RIGHT)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mods Left";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34 35 36 37>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mods Right";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 36 37>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        brackets: brackets {
            compatible = "zmk,behavior-tap-dance";
            label = "Brackets";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <175>;
        };

        braces: braces {
            compatible = "zmk,behavior-tap-dance";
            label = "Braces";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            tapping-term-ms = <175>;
        };

        parenthesis: parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "Parenthesis";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            tapping-term-ms = <175>;
        };

        thans: thans {
            compatible = "zmk,behavior-tap-dance";
            label = "Thans";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            tapping-term-ms = <175>;
        };

        backspace: backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "Backspace";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            tapping-term-ms = <250>;
        };

        lbspc: lbspc {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer_backspace";
            bindings = <&mo>, <&backspace>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            quick-tap-ms = <225>;
        };

        enter: enter {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            hold-while-undecided;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER_MORPH";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&enter RS(RIGHT_GUI) ENTER>;
            key-positions = <16 17>;
            layers = <0>;
            slow-release;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <24 23>;
            layers = <0>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <23 22>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <22 24>;
            layers = <0>;
        };

        undu {
            bindings = <&kp LG(Z)>;
            key-positions = <21 22>;
            layers = <0>;
        };

        caps-word {
            bindings = <&caps_word>;
            key-positions = <12 17>;
            layers = <0>;
        };

        tab {
            bindings = <&enter LS(LGUI) TAB>;
            key-positions = <12 13>;
            slow-release;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
           &kp Q         &kp W            &kp E          &kp R        &kp T                      &kp Y                    &kp U        &kp I          &kp O        &kp P
           &hml LCTRL A  &hml LEFT_ALT S  &hml LSHIFT D  &hml LGUI F  &hml LS(LA(LC(LGUI))) G    &hmr RS(RA(RC(RGUI))) H  &hmr RGUI J  &hmr RSHIFT K  &hml RALT L  &hmr RCTRL SEMI
&kp GRAVE  &kp Z         &kp X            &kp C          &kp V        &kp B                      &kp N                    &kp M        &kp COMMA      &kp DOT      &kp FSLH         &kp SQT
                                          &kp ESC        &lt 1 SPACE  &lt 3 TAB                  &lbspc 2 0               &lt 4 SPACE  &kp RALT
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
       &none      &none     &none      &none     &none                       &none  &none     &none          &none        &none
       &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI  &kp LS(LA(LC(LEFT_GUI)))    &none  &tdl      &kp DOWN       &kp UP       &tdr
&none  &none      &none     &none      &none     &none                       &none  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END  &none
                            &none      &none     &none                       &none  &none     &none
            >;
        };

        Num {
            label = "Num";
            bindings = <
       &none  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &none    &none  &none              &none            &none          &none
       &none  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none    &none  &kp RIGHT_COMMAND  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_CONTROL
&none  &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none    &none  &none              &none            &none          &none              &none
                            &kp NUMBER_0  &none         &none    &none  &none              &none
            >;
        };

        Sym {
            label = "Sym";
            bindings = <
       &trans        &trans        &trans          &trans        &trans                  &kp BACKSLASH  &kp AMPERSAND    &kp ASTERISK  &parenthesis  &kp MINUS
       &kp LEFT_ALT  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_GUI  &kp LS(LA(LC(LGUI)))    &braces        &kp DOLLAR       &kp PERCENT   &kp CARET     &kp PLUS
&none  &trans        &trans        &trans          &trans        &trans                  &brackets      &kp EXCLAMATION  &kp AT_SIGN   &kp POUND     &thans     &kp EQUAL
                                   &trans          &trans        &trans                  &none          &none            &none
            >;
        };

        Fun {
            label = "Fun";
            bindings = <
       &kp F12  &kp F7  &kp F8  &kp F9  &none    &none                 &none          &none            &none          &none
       &kp F11  &kp F4  &kp F5  &kp F6  &none    &kp RS(RA(RC(RGUI)))  &kp RIGHT_GUI  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_CONTROL
&none  &kp F10  &kp F1  &kp F2  &kp F3  &none    &none                 &none          &none            &none          &none              &none
                        &none   &none   &none    &none                 &none          &none
            >;
        };
    };
};
