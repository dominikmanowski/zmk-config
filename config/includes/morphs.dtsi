// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: slash | shift + tap: pipe | ctrl + shift + tap: backslash
ZMK_MOD_MORPH(slash_morph, \
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp FSLH>, <&slash_inner_morph>;
)
ZMK_MOD_MORPH(NAME,
    mods = <(MOD_LCTL|MOD_LSFT|MOD_RCTL|MOD_RSFT)>>;
    bindings = <&kp PIPE>, <&kp BSLH>;
)

// tap: excl | shift + tap: qmark
SIMPLE_MORPH(excl, SFT, &kp EXCL, &kp QMARK)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
SIMPLE_MORPH(bs_del, SFT, &kp BSPC, &kp DEL)
