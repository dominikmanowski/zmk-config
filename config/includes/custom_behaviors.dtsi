#define MAKE_TD(NAME, TAP, DOUBLE_TAP) \
    ZMK_TAP_DANCE(NAME,\
        tapping-term-ms = <200>; \
        bindings = <TAP>, <DOUBLE_TAP>; \
    )

// tap: left | double tap: alt + left
MAKE_TD(tdl, &kp LEFT, &kp LA(LEFT))

// tap: right | double tap: alt + right
MAKE_TD(tdr, &kp RIGHT, &kp LA(RIGHT))

// tap: open bracket | double tap: close bracket
MAKE_TD(brackets, &kp LBKT, &kp RBKT)

// tap: left curly brace | double tap: right curly brace
MAKE_TD(braces, &kp LBRC, &kp RBRC)

// tap: left parenthesis | double tap: right parenthesis
MAKE_TD(parenthesis, &kp LPAR, &kp RPAR)

// tap: less than | double tap: greater than
MAKE_TD(thans, &kp LT, &kp GT)

ZMK_HOLD_TAP(th,
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
    hold-while-undecided;
)

ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)

MAKE_TD(num_dance, &sl NUM, &num_word NUM)

ZMK_HOLD_TAP(sla,
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&sl>;
)

ZMK_TAP_DANCE(esc_to_alt,
    tapping-term-ms = <200>;
    bindings = <&kp ESC>, <&to ALT>;
)

ZMK_TAP_DANCE(esc_to_def,
    tapping-term-ms = <200>;
    bindings = <&kp ESC>, <&to BASE>;
)